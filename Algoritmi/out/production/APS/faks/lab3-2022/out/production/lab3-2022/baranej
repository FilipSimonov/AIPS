Пред командантот на војската наредени се сите војници и во двојно поврзана листа дадени се нивните ID-a.
На командантот не му се допаѓа како се наредени војниците и решава да одбере два под-интервали од војници и да им ги замени местата,
 односно војниците што се наоѓаат во едниот под-интервал ќе ги смести во другиот, и обратно.

Влез: Во првиот ред даден е бројот на војници. Во вториот ред дадени се ID-то на секој од војниците.
 Во третиот ред дадени се два броеви, ID на првиот војник и ID на последниот војник од првиот интервал.
 Во четвртиот ред дадени се два броеви, ID на првиот војник и ID на последниот војник од вториот интервал.

Излез: Да се испечати новиот редослед на војниците (т.е. на нивните ID-a)



Забелешка 1: Интервалите никогаш нема да се преклопуваат и ќе содржат барем еден војник.
Целата низа ќе содржи најмалку два војника.

Забелешка 2: Обратете посебно внимание кога интервалите се еден до друг и кога некој од интервалите
почнува од првиот војник или завршува со последниот војник.

Внимавајте:

1. Даден е целосниот код на структурата којашто треба да се користи.
Дадена е и тест класата DLLVojska.java, со целосно имплементиран input и output.
Потребно е да се менува само во рамки на DLL<Integer> vojska(DLL<Integer> lista, int a, int b, int c, int d) функцијата.

2. Притоа, поместувањето на интервалите треба да се однесува на менувањето на самите врски во јазлите од листата.

3. Не смее да менувате во main функцијата !


For example:

Input	Result
10
1 2 3 4 5 6 7 8 9 10
1 5
6 10


6<->7<->8<->9<->10<->1<->2<->3<->4<->5


 DLLNode<Integer> pochetok1, kraj1, pochetok2, kraj2, temp ;
        pochetok1= kraj1= pochetok2= kraj2= temp = null;

        pochetok1=lista.find(a);
        kraj1=lista.find(b);
        pochetok2=lista.find(c);
        kraj2=lista.find(d);


        pochetok2.pred.succ=pochetok1;

        if(lista.getFirst()== pochetok1){
            pochetok1.pred= pochetok2.pred;
            pochetok2.pred=null;
            lista.setFirst(pochetok2);
        }else{
            pochetok1.pred.succ= pochetok2;
            temp= pochetok1.pred;
            pochetok1.pred=pochetok2.pred;
            pochetok2.pred=temp;
        }

        kraj1.pred.succ=kraj2;
        if(lista.getLast()==kraj2){
            kraj2.succ=kraj1.succ;
            kraj1.succ= null;
            lista.setLast(kraj1);
        }else{
            kraj2.pred.succ=kraj1;
            temp=kraj1.succ;
            kraj1.succ=kraj2.succ;
            kraj2.succ=temp;
        }